{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = [{\n  id: \"1\",\n  title: \"Task1\",\n  description: \"Task 1 description\",\n  completed: false\n}, {\n  id: \"2\",\n  title: \"Task2\",\n  description: \"Task 2 description\",\n  completed: false\n}];\n\n//actúa parecido a useState\nexport const taskSlice = createSlice({\n  name: 'task',\n  initialState,\n  //puede ser cualquier valor inicial\n  reducers: {\n    //funciones para alterar el estado\n    addTask: (state, action) => {\n      state.push(action.payload); //añade la nueva tarea\n    },\n\n    editTask: (state, action) => {\n      const {\n        id,\n        title,\n        description\n      } = action.payload;\n      const task = state.find;\n    },\n    deleteTask: (state, action) => {\n      //elimina la tarea\n      const taskFound = state.find(task => task.id === action.payload); //por cada tarea que estés comparando cuyo id sea igual que el payload.id, elimínalo.\n      if (taskFound) {\n        state.splice(state.indexOf(taskFound), 1);\n      }\n    }\n  }\n});\nexport const {\n  addTask,\n  deleteTask,\n  editTask\n} = taskSlice.actions;\nexport default taskSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","id","title","description","completed","taskSlice","name","reducers","addTask","state","action","push","payload","editTask","task","find","deleteTask","taskFound","splice","indexOf","actions","reducer"],"sources":["/Users/alejandrogarciacarmona/Documents/FormaciónBlacnosaur/tutorialReactReduxToolkitCRUD/react-redux-toolkit-crud/src/features/task/taskSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = [\n    {\n        id: \"1\",\n        title: \"Task1\",\n        description: \"Task 1 description\",\n        completed: false\n    },\n    {\n        id: \"2\",\n        title: \"Task2\",\n        description: \"Task 2 description\",\n        completed: false\n    }\n\n];\n\n//actúa parecido a useState\nexport const taskSlice = createSlice({\n    name: 'task',\n    initialState, //puede ser cualquier valor inicial\n    reducers: { //funciones para alterar el estado\n        addTask: (state, action) => {\n            state.push(action.payload) //añade la nueva tarea\n        },\n        editTask: (state, action) => {\n            const {id, title, description} = (action.payload);\n\n            const task = state.find\n        },\n        deleteTask: (state, action) => {//elimina la tarea\n            const taskFound = state.find(task => task.id === action.payload)//por cada tarea que estés comparando cuyo id sea igual que el payload.id, elimínalo.\n            if(taskFound) {\n                state.splice(state.indexOf(taskFound), 1)\n            }\n        }\n    }\n})\n\nexport const {addTask, deleteTask, editTask} = taskSlice.actions;\nexport default taskSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAG,CACjB;EACIC,EAAE,EAAE,GAAG;EACPC,KAAK,EAAE,OAAO;EACdC,WAAW,EAAE,oBAAoB;EACjCC,SAAS,EAAE;AACf,CAAC,EACD;EACIH,EAAE,EAAE,GAAG;EACPC,KAAK,EAAE,OAAO;EACdC,WAAW,EAAE,oBAAoB;EACjCC,SAAS,EAAE;AACf,CAAC,CAEJ;;AAED;AACA,OAAO,MAAMC,SAAS,GAAGN,WAAW,CAAC;EACjCO,IAAI,EAAE,MAAM;EACZN,YAAY;EAAE;EACdO,QAAQ,EAAE;IAAE;IACRC,OAAO,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MACxBD,KAAK,CAACE,IAAI,CAACD,MAAM,CAACE,OAAO,CAAC,EAAC;IAC/B,CAAC;;IACDC,QAAQ,EAAEA,CAACJ,KAAK,EAAEC,MAAM,KAAK;MACzB,MAAM;QAACT,EAAE;QAAEC,KAAK;QAAEC;MAAW,CAAC,GAAIO,MAAM,CAACE,OAAQ;MAEjD,MAAME,IAAI,GAAGL,KAAK,CAACM,IAAI;IAC3B,CAAC;IACDC,UAAU,EAAEA,CAACP,KAAK,EAAEC,MAAM,KAAK;MAAC;MAC5B,MAAMO,SAAS,GAAGR,KAAK,CAACM,IAAI,CAACD,IAAI,IAAIA,IAAI,CAACb,EAAE,KAAKS,MAAM,CAACE,OAAO,CAAC;MAChE,IAAGK,SAAS,EAAE;QACVR,KAAK,CAACS,MAAM,CAACT,KAAK,CAACU,OAAO,CAACF,SAAS,CAAC,EAAE,CAAC,CAAC;MAC7C;IACJ;EACJ;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAACT,OAAO;EAAEQ,UAAU;EAAEH;AAAQ,CAAC,GAAGR,SAAS,CAACe,OAAO;AAChE,eAAef,SAAS,CAACgB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}